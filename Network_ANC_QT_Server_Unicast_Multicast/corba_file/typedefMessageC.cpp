// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:375


#include "typedefMessageC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "typedefMessageC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_LocalInterface_BaseTypes_tbBoolean (
    ::CORBA::tk_alias,
    "IDL:LocalInterface/BaseTypes/tbBoolean:1.0",
    "tbBoolean",
    &CORBA::_tc_boolean);
  

namespace LocalInterface
{
  
  namespace BaseTypes
  {
    ::CORBA::TypeCode_ptr const _tc_tbBoolean =
      &_tao_tc_LocalInterface_BaseTypes_tbBoolean;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_LocalInterface_BaseTypes_tnInt16 (
    ::CORBA::tk_alias,
    "IDL:LocalInterface/BaseTypes/tnInt16:1.0",
    "tnInt16",
    &CORBA::_tc_short);
  

namespace LocalInterface
{
  
  namespace BaseTypes
  {
    ::CORBA::TypeCode_ptr const _tc_tnInt16 =
      &_tao_tc_LocalInterface_BaseTypes_tnInt16;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_LocalInterface_BaseTypes_tnInt32 (
    ::CORBA::tk_alias,
    "IDL:LocalInterface/BaseTypes/tnInt32:1.0",
    "tnInt32",
    &CORBA::_tc_long);
  

namespace LocalInterface
{
  
  namespace BaseTypes
  {
    ::CORBA::TypeCode_ptr const _tc_tnInt32 =
      &_tao_tc_LocalInterface_BaseTypes_tnInt32;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_LocalInterface_BaseTypes_tnString (
    ::CORBA::tk_alias,
    "IDL:LocalInterface/BaseTypes/tnString:1.0",
    "tnString",
    &CORBA::_tc_string);
  

namespace LocalInterface
{
  
  namespace BaseTypes
  {
    ::CORBA::TypeCode_ptr const _tc_tnString =
      &_tao_tc_LocalInterface_BaseTypes_tnString;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_LocalInterface_BaseTypes_tnUInt16 (
    ::CORBA::tk_alias,
    "IDL:LocalInterface/BaseTypes/tnUInt16:1.0",
    "tnUInt16",
    &CORBA::_tc_ushort);
  

namespace LocalInterface
{
  
  namespace BaseTypes
  {
    ::CORBA::TypeCode_ptr const _tc_tnUInt16 =
      &_tao_tc_LocalInterface_BaseTypes_tnUInt16;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_LocalInterface_BaseTypes_tnUInt2 (
    ::CORBA::tk_alias,
    "IDL:LocalInterface/BaseTypes/tnUInt2:1.0",
    "tnUInt2",
    &CORBA::_tc_char);
  

namespace LocalInterface
{
  
  namespace BaseTypes
  {
    ::CORBA::TypeCode_ptr const _tc_tnUInt2 =
      &_tao_tc_LocalInterface_BaseTypes_tnUInt2;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_LocalInterface_BaseTypes_tnUInt32 (
    ::CORBA::tk_alias,
    "IDL:LocalInterface/BaseTypes/tnUInt32:1.0",
    "tnUInt32",
    &CORBA::_tc_ulong);
  

namespace LocalInterface
{
  
  namespace BaseTypes
  {
    ::CORBA::TypeCode_ptr const _tc_tnUInt32 =
      &_tao_tc_LocalInterface_BaseTypes_tnUInt32;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_LocalInterface_BaseTypes_trFloat64 (
    ::CORBA::tk_alias,
    "IDL:LocalInterface/BaseTypes/trFloat64:1.0",
    "trFloat64",
    &CORBA::_tc_double);
  

namespace LocalInterface
{
  
  namespace BaseTypes
  {
    ::CORBA::TypeCode_ptr const _tc_trFloat64 =
      &_tao_tc_LocalInterface_BaseTypes_trFloat64;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_LocalInterface_BaseTypes_SwitchNTP_ServerEnum[] =
  {
    "SwitchToPrimary",
    "SwitchToSecondary",
    "SwitchToInternal"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_LocalInterface_BaseTypes_SwitchNTP_ServerEnum (
    "IDL:LocalInterface/BaseTypes/SwitchNTP_ServerEnum:1.0",
    "SwitchNTP_ServerEnum",
    _tao_enumerators_LocalInterface_BaseTypes_SwitchNTP_ServerEnum,
    3);
  

namespace LocalInterface
{
  
  namespace BaseTypes
  {
    ::CORBA::TypeCode_ptr const _tc_SwitchNTP_ServerEnum =
      &_tao_tc_LocalInterface_BaseTypes_SwitchNTP_ServerEnum;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_LocalInterface_BaseTypes_SourceDestinationEnum[] =
  {
    "MICS",
    "Sensor",
    "Launcher",
    "Other"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_LocalInterface_BaseTypes_SourceDestinationEnum (
    "IDL:LocalInterface/BaseTypes/SourceDestinationEnum:1.0",
    "SourceDestinationEnum",
    _tao_enumerators_LocalInterface_BaseTypes_SourceDestinationEnum,
    4);
  

namespace LocalInterface
{
  
  namespace BaseTypes
  {
    ::CORBA::TypeCode_ptr const _tc_SourceDestinationEnum =
      &_tao_tc_LocalInterface_BaseTypes_SourceDestinationEnum;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_LocalInterface_CompositeTypes_MessageHeaderStruct[] =
      {
        { "Source", &LocalInterface::BaseTypes::_tc_SourceDestinationEnum },
        { "ResponseID", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "MessageLength", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "MessageID", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "Destination", &LocalInterface::BaseTypes::_tc_SourceDestinationEnum },
        { "TimeStamp", &LocalInterface::BaseTypes::_tc_trFloat64 }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_LocalInterface_CompositeTypes_MessageHeaderStruct (
  ::CORBA::tk_struct,
  "IDL:LocalInterface/CompositeTypes/MessageHeaderStruct:1.0",
  "MessageHeaderStruct",
  _tao_fields_LocalInterface_CompositeTypes_MessageHeaderStruct,
  6);


namespace LocalInterface
{
  
  namespace CompositeTypes
  {
    ::CORBA::TypeCode_ptr const _tc_MessageHeaderStruct =
      &_tao_tc_LocalInterface_CompositeTypes_MessageHeaderStruct;
  }
}

// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:58

void 
LocalInterface::CompositeTypes::MessageHeaderStruct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  MessageHeaderStruct *_tao_tmp_pointer =
    static_cast<MessageHeaderStruct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_LocalInterface_CompositeTypes_cmdUpdateParametersCompType[] =
      {
        { "Header", &LocalInterface::CompositeTypes::_tc_MessageHeaderStruct },
        { "PrimaryNTP_ServIP_Addr", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "SecondaryNTP_ServIP_Addr", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "TimeCorrection", &LocalInterface::BaseTypes::_tc_tnInt16 },
        { "NTP_Threshold", &LocalInterface::BaseTypes::_tc_tnUInt16 },
        { "PrivateHostAddr", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "PrivateHostMask", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "PrivateHostPort", &LocalInterface::BaseTypes::_tc_tnUInt16 },
        { "PublicVoIP_Addr", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "PublicVoIP_Mask", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "PublicVoIP_Port", &LocalInterface::BaseTypes::_tc_tnUInt16 },
        { "PublicHostAddr", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "PublicHostMask", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "PrivateRR_EthernetAddr", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "PrivateRR_Mask", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "PublicRR_Addr", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "PublicRR_Mask", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "PrivateRP_Addr", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "PrivateRP_Mask", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "PrivateRP_Port", &LocalInterface::BaseTypes::_tc_tnUInt16 },
        { "PublicRP_Addr", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "PublicRP_Mask", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "MulticastGroupAddr", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "SwitchNTP_Server", &LocalInterface::BaseTypes::_tc_SwitchNTP_ServerEnum },
        { "PrivateRR_FiberAddr", &LocalInterface::BaseTypes::_tc_tnUInt32 }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_LocalInterface_CompositeTypes_cmdUpdateParametersCompType (
  ::CORBA::tk_struct,
  "IDL:LocalInterface/CompositeTypes/cmdUpdateParametersCompType:1.0",
  "cmdUpdateParametersCompType",
  _tao_fields_LocalInterface_CompositeTypes_cmdUpdateParametersCompType,
  25);


namespace LocalInterface
{
  
  namespace CompositeTypes
  {
    ::CORBA::TypeCode_ptr const _tc_cmdUpdateParametersCompType =
      &_tao_tc_LocalInterface_CompositeTypes_cmdUpdateParametersCompType;
  }
}

// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:58

void 
LocalInterface::CompositeTypes::cmdUpdateParametersCompType::_tao_any_destructor (
    void *_tao_void_pointer)
{
  cmdUpdateParametersCompType *_tao_tmp_pointer =
    static_cast<cmdUpdateParametersCompType *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_LocalInterface_CompositeTypes_cmdUpdateParametersCompTypeNew[] =
      {
        { "Val1", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "Val2", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "Eta", &LocalInterface::BaseTypes::_tc_tnInt16 },
        { "Figli", &LocalInterface::BaseTypes::_tc_tnUInt16 },
        { "Famigliari", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "Tel1", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "Tel2", &LocalInterface::BaseTypes::_tc_tnUInt16 }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_LocalInterface_CompositeTypes_cmdUpdateParametersCompTypeNew (
  ::CORBA::tk_struct,
  "IDL:LocalInterface/CompositeTypes/cmdUpdateParametersCompTypeNew:1.0",
  "cmdUpdateParametersCompTypeNew",
  _tao_fields_LocalInterface_CompositeTypes_cmdUpdateParametersCompTypeNew,
  7);


namespace LocalInterface
{
  
  namespace CompositeTypes
  {
    ::CORBA::TypeCode_ptr const _tc_cmdUpdateParametersCompTypeNew =
      &_tao_tc_LocalInterface_CompositeTypes_cmdUpdateParametersCompTypeNew;
  }
}

// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:58

void 
LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew::_tao_any_destructor (
    void *_tao_void_pointer)
{
  cmdUpdateParametersCompTypeNew *_tao_tmp_pointer =
    static_cast<cmdUpdateParametersCompTypeNew *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_LocalInterface_CompositeTypes_cmdUpdateParametersCompTypeLogic[] =
      {
        { "Eta", &LocalInterface::BaseTypes::_tc_tnInt16 },
        { "Figli", &LocalInterface::BaseTypes::_tc_tnUInt16 },
        { "Famigliari", &LocalInterface::BaseTypes::_tc_tnUInt32 },
        { "Tel", &LocalInterface::BaseTypes::_tc_tnUInt32 }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_LocalInterface_CompositeTypes_cmdUpdateParametersCompTypeLogic (
  ::CORBA::tk_struct,
  "IDL:LocalInterface/CompositeTypes/cmdUpdateParametersCompTypeLogic:1.0",
  "cmdUpdateParametersCompTypeLogic",
  _tao_fields_LocalInterface_CompositeTypes_cmdUpdateParametersCompTypeLogic,
  4);


namespace LocalInterface
{
  
  namespace CompositeTypes
  {
    ::CORBA::TypeCode_ptr const _tc_cmdUpdateParametersCompTypeLogic =
      &_tao_tc_LocalInterface_CompositeTypes_cmdUpdateParametersCompTypeLogic;
  }
}

// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:58

void 
LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic::_tao_any_destructor (
    void *_tao_void_pointer)
{
  cmdUpdateParametersCompTypeLogic *_tao_tmp_pointer =
    static_cast<cmdUpdateParametersCompTypeLogic *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:43

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace LocalInterface
{
  
  namespace BaseTypes
  {
    void operator<<= (
        ::CORBA::Any &_tao_any,
        ::LocalInterface::BaseTypes::SwitchNTP_ServerEnum _tao_elem
      )
    {
      TAO::Any_Basic_Impl_T< ::LocalInterface::BaseTypes::SwitchNTP_ServerEnum>::insert (
          _tao_any,
          ::LocalInterface::BaseTypes::_tc_SwitchNTP_ServerEnum,
          _tao_elem
        );
    }

    ::CORBA::Boolean operator>>= (
        const ::CORBA::Any &_tao_any,
        ::LocalInterface::BaseTypes::SwitchNTP_ServerEnum &_tao_elem
      )
    {
      return
        TAO::Any_Basic_Impl_T< ::LocalInterface::BaseTypes::SwitchNTP_ServerEnum>::extract (
            _tao_any,
            ::LocalInterface::BaseTypes::_tc_SwitchNTP_ServerEnum,
            _tao_elem 
          );
    }
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    LocalInterface::BaseTypes::SwitchNTP_ServerEnum _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<LocalInterface::BaseTypes::SwitchNTP_ServerEnum>::insert (
      _tao_any,
      LocalInterface::BaseTypes::_tc_SwitchNTP_ServerEnum,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    LocalInterface::BaseTypes::SwitchNTP_ServerEnum &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<LocalInterface::BaseTypes::SwitchNTP_ServerEnum>::extract (
        _tao_any,
        LocalInterface::BaseTypes::_tc_SwitchNTP_ServerEnum,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:43

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace LocalInterface
{
  
  namespace BaseTypes
  {
    void operator<<= (
        ::CORBA::Any &_tao_any,
        ::LocalInterface::BaseTypes::SourceDestinationEnum _tao_elem
      )
    {
      TAO::Any_Basic_Impl_T< ::LocalInterface::BaseTypes::SourceDestinationEnum>::insert (
          _tao_any,
          ::LocalInterface::BaseTypes::_tc_SourceDestinationEnum,
          _tao_elem
        );
    }

    ::CORBA::Boolean operator>>= (
        const ::CORBA::Any &_tao_any,
        ::LocalInterface::BaseTypes::SourceDestinationEnum &_tao_elem
      )
    {
      return
        TAO::Any_Basic_Impl_T< ::LocalInterface::BaseTypes::SourceDestinationEnum>::extract (
            _tao_any,
            ::LocalInterface::BaseTypes::_tc_SourceDestinationEnum,
            _tao_elem 
          );
    }
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    LocalInterface::BaseTypes::SourceDestinationEnum _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<LocalInterface::BaseTypes::SourceDestinationEnum>::insert (
      _tao_any,
      LocalInterface::BaseTypes::_tc_SourceDestinationEnum,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    LocalInterface::BaseTypes::SourceDestinationEnum &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<LocalInterface::BaseTypes::SourceDestinationEnum>::extract (
        _tao_any,
        LocalInterface::BaseTypes::_tc_SourceDestinationEnum,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace LocalInterface
{
  
  namespace CompositeTypes
  {
    // Copying insertion.
    void operator<<= (
        ::CORBA::Any &_tao_any,
        const ::LocalInterface::CompositeTypes::MessageHeaderStruct &_tao_elem
      )
    {
      if (0 == &_tao_elem) // Trying to de-reference NULL object
        _tao_any <<= static_cast< ::LocalInterface::CompositeTypes::MessageHeaderStruct *>( 0 ); // Use non-copying insertion of a NULL
      else
        TAO::Any_Dual_Impl_T< ::LocalInterface::CompositeTypes::MessageHeaderStruct>::insert_copy (
            _tao_any,
            ::LocalInterface::CompositeTypes::MessageHeaderStruct::_tao_any_destructor,
            ::LocalInterface::CompositeTypes::_tc_MessageHeaderStruct,
            _tao_elem
          );
    }

    // Non-copying insertion.
    void operator<<= (
        ::CORBA::Any &_tao_any, ::
        LocalInterface::CompositeTypes::MessageHeaderStruct *_tao_elem
      )
    {
      TAO::Any_Dual_Impl_T< ::LocalInterface::CompositeTypes::MessageHeaderStruct>::insert (
          _tao_any,
          ::LocalInterface::CompositeTypes::MessageHeaderStruct::_tao_any_destructor,
          ::LocalInterface::CompositeTypes::_tc_MessageHeaderStruct,
          _tao_elem
        );
    }

    // Extraction to non-const pointer (deprecated).
    ::CORBA::Boolean operator>>= (
        const ::CORBA::Any &_tao_any,
        ::LocalInterface::CompositeTypes::MessageHeaderStruct *&_tao_elem
      )
    {
      return _tao_any >>= const_cast<
          const ::LocalInterface::CompositeTypes::MessageHeaderStruct *&> (
          _tao_elem
        );
    }

    // Extraction to const pointer.
    ::CORBA::Boolean operator>>= (
        const ::CORBA::Any &_tao_any,
        const ::LocalInterface::CompositeTypes::MessageHeaderStruct *&_tao_elem
      )
    {
      return
        TAO::Any_Dual_Impl_T< ::LocalInterface::CompositeTypes::MessageHeaderStruct>::extract (
            _tao_any,
            ::LocalInterface::CompositeTypes::MessageHeaderStruct::_tao_any_destructor,
            ::LocalInterface::CompositeTypes::_tc_MessageHeaderStruct,
            _tao_elem
          );
    }
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const LocalInterface::CompositeTypes::MessageHeaderStruct &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<LocalInterface::CompositeTypes::MessageHeaderStruct *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<LocalInterface::CompositeTypes::MessageHeaderStruct>::insert_copy (
        _tao_any,
        LocalInterface::CompositeTypes::MessageHeaderStruct::_tao_any_destructor,
        LocalInterface::CompositeTypes::_tc_MessageHeaderStruct,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    LocalInterface::CompositeTypes::MessageHeaderStruct *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<LocalInterface::CompositeTypes::MessageHeaderStruct>::insert (
      _tao_any,
      LocalInterface::CompositeTypes::MessageHeaderStruct::_tao_any_destructor,
      LocalInterface::CompositeTypes::_tc_MessageHeaderStruct,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    LocalInterface::CompositeTypes::MessageHeaderStruct *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const LocalInterface::CompositeTypes::MessageHeaderStruct *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const LocalInterface::CompositeTypes::MessageHeaderStruct *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<LocalInterface::CompositeTypes::MessageHeaderStruct>::extract (
        _tao_any,
        LocalInterface::CompositeTypes::MessageHeaderStruct::_tao_any_destructor,
        LocalInterface::CompositeTypes::_tc_MessageHeaderStruct,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace LocalInterface
{
  
  namespace CompositeTypes
  {
    // Copying insertion.
    void operator<<= (
        ::CORBA::Any &_tao_any,
        const ::LocalInterface::CompositeTypes::cmdUpdateParametersCompType &_tao_elem
      )
    {
      if (0 == &_tao_elem) // Trying to de-reference NULL object
        _tao_any <<= static_cast< ::LocalInterface::CompositeTypes::cmdUpdateParametersCompType *>( 0 ); // Use non-copying insertion of a NULL
      else
        TAO::Any_Dual_Impl_T< ::LocalInterface::CompositeTypes::cmdUpdateParametersCompType>::insert_copy (
            _tao_any,
            ::LocalInterface::CompositeTypes::cmdUpdateParametersCompType::_tao_any_destructor,
            ::LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompType,
            _tao_elem
          );
    }

    // Non-copying insertion.
    void operator<<= (
        ::CORBA::Any &_tao_any, ::
        LocalInterface::CompositeTypes::cmdUpdateParametersCompType *_tao_elem
      )
    {
      TAO::Any_Dual_Impl_T< ::LocalInterface::CompositeTypes::cmdUpdateParametersCompType>::insert (
          _tao_any,
          ::LocalInterface::CompositeTypes::cmdUpdateParametersCompType::_tao_any_destructor,
          ::LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompType,
          _tao_elem
        );
    }

    // Extraction to non-const pointer (deprecated).
    ::CORBA::Boolean operator>>= (
        const ::CORBA::Any &_tao_any,
        ::LocalInterface::CompositeTypes::cmdUpdateParametersCompType *&_tao_elem
      )
    {
      return _tao_any >>= const_cast<
          const ::LocalInterface::CompositeTypes::cmdUpdateParametersCompType *&> (
          _tao_elem
        );
    }

    // Extraction to const pointer.
    ::CORBA::Boolean operator>>= (
        const ::CORBA::Any &_tao_any,
        const ::LocalInterface::CompositeTypes::cmdUpdateParametersCompType *&_tao_elem
      )
    {
      return
        TAO::Any_Dual_Impl_T< ::LocalInterface::CompositeTypes::cmdUpdateParametersCompType>::extract (
            _tao_any,
            ::LocalInterface::CompositeTypes::cmdUpdateParametersCompType::_tao_any_destructor,
            ::LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompType,
            _tao_elem
          );
    }
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const LocalInterface::CompositeTypes::cmdUpdateParametersCompType &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<LocalInterface::CompositeTypes::cmdUpdateParametersCompType *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<LocalInterface::CompositeTypes::cmdUpdateParametersCompType>::insert_copy (
        _tao_any,
        LocalInterface::CompositeTypes::cmdUpdateParametersCompType::_tao_any_destructor,
        LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompType,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    LocalInterface::CompositeTypes::cmdUpdateParametersCompType *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<LocalInterface::CompositeTypes::cmdUpdateParametersCompType>::insert (
      _tao_any,
      LocalInterface::CompositeTypes::cmdUpdateParametersCompType::_tao_any_destructor,
      LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompType,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    LocalInterface::CompositeTypes::cmdUpdateParametersCompType *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const LocalInterface::CompositeTypes::cmdUpdateParametersCompType *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const LocalInterface::CompositeTypes::cmdUpdateParametersCompType *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<LocalInterface::CompositeTypes::cmdUpdateParametersCompType>::extract (
        _tao_any,
        LocalInterface::CompositeTypes::cmdUpdateParametersCompType::_tao_any_destructor,
        LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompType,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace LocalInterface
{
  
  namespace CompositeTypes
  {
    // Copying insertion.
    void operator<<= (
        ::CORBA::Any &_tao_any,
        const ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew &_tao_elem
      )
    {
      if (0 == &_tao_elem) // Trying to de-reference NULL object
        _tao_any <<= static_cast< ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew *>( 0 ); // Use non-copying insertion of a NULL
      else
        TAO::Any_Dual_Impl_T< ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew>::insert_copy (
            _tao_any,
            ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew::_tao_any_destructor,
            ::LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompTypeNew,
            _tao_elem
          );
    }

    // Non-copying insertion.
    void operator<<= (
        ::CORBA::Any &_tao_any, ::
        LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew *_tao_elem
      )
    {
      TAO::Any_Dual_Impl_T< ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew>::insert (
          _tao_any,
          ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew::_tao_any_destructor,
          ::LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompTypeNew,
          _tao_elem
        );
    }

    // Extraction to non-const pointer (deprecated).
    ::CORBA::Boolean operator>>= (
        const ::CORBA::Any &_tao_any,
        ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew *&_tao_elem
      )
    {
      return _tao_any >>= const_cast<
          const ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew *&> (
          _tao_elem
        );
    }

    // Extraction to const pointer.
    ::CORBA::Boolean operator>>= (
        const ::CORBA::Any &_tao_any,
        const ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew *&_tao_elem
      )
    {
      return
        TAO::Any_Dual_Impl_T< ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew>::extract (
            _tao_any,
            ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew::_tao_any_destructor,
            ::LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompTypeNew,
            _tao_elem
          );
    }
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew>::insert_copy (
        _tao_any,
        LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew::_tao_any_destructor,
        LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompTypeNew,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew>::insert (
      _tao_any,
      LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew::_tao_any_destructor,
      LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompTypeNew,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew>::extract (
        _tao_any,
        LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew::_tao_any_destructor,
        LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompTypeNew,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace LocalInterface
{
  
  namespace CompositeTypes
  {
    // Copying insertion.
    void operator<<= (
        ::CORBA::Any &_tao_any,
        const ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic &_tao_elem
      )
    {
      if (0 == &_tao_elem) // Trying to de-reference NULL object
        _tao_any <<= static_cast< ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic *>( 0 ); // Use non-copying insertion of a NULL
      else
        TAO::Any_Dual_Impl_T< ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic>::insert_copy (
            _tao_any,
            ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic::_tao_any_destructor,
            ::LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompTypeLogic,
            _tao_elem
          );
    }

    // Non-copying insertion.
    void operator<<= (
        ::CORBA::Any &_tao_any, ::
        LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic *_tao_elem
      )
    {
      TAO::Any_Dual_Impl_T< ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic>::insert (
          _tao_any,
          ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic::_tao_any_destructor,
          ::LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompTypeLogic,
          _tao_elem
        );
    }

    // Extraction to non-const pointer (deprecated).
    ::CORBA::Boolean operator>>= (
        const ::CORBA::Any &_tao_any,
        ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic *&_tao_elem
      )
    {
      return _tao_any >>= const_cast<
          const ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic *&> (
          _tao_elem
        );
    }

    // Extraction to const pointer.
    ::CORBA::Boolean operator>>= (
        const ::CORBA::Any &_tao_any,
        const ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic *&_tao_elem
      )
    {
      return
        TAO::Any_Dual_Impl_T< ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic>::extract (
            _tao_any,
            ::LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic::_tao_any_destructor,
            ::LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompTypeLogic,
            _tao_elem
          );
    }
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic>::insert_copy (
        _tao_any,
        LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic::_tao_any_destructor,
        LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompTypeLogic,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic>::insert (
      _tao_any,
      LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic::_tao_any_destructor,
      LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompTypeLogic,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic>::extract (
        _tao_any,
        LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic::_tao_any_destructor,
        LocalInterface::CompositeTypes::_tc_cmdUpdateParametersCompTypeLogic,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, LocalInterface::BaseTypes::SwitchNTP_ServerEnum _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, LocalInterface::BaseTypes::SwitchNTP_ServerEnum & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<LocalInterface::BaseTypes::SwitchNTP_ServerEnum> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, LocalInterface::BaseTypes::SourceDestinationEnum _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, LocalInterface::BaseTypes::SourceDestinationEnum & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<LocalInterface::BaseTypes::SourceDestinationEnum> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const LocalInterface::CompositeTypes::MessageHeaderStruct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.Source) &&
    (strm << _tao_aggregate.ResponseID) &&
    (strm << _tao_aggregate.MessageLength) &&
    (strm << _tao_aggregate.MessageID) &&
    (strm << _tao_aggregate.Destination) &&
    (strm << _tao_aggregate.TimeStamp);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    LocalInterface::CompositeTypes::MessageHeaderStruct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.Source) &&
    (strm >> _tao_aggregate.ResponseID) &&
    (strm >> _tao_aggregate.MessageLength) &&
    (strm >> _tao_aggregate.MessageID) &&
    (strm >> _tao_aggregate.Destination) &&
    (strm >> _tao_aggregate.TimeStamp);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const LocalInterface::CompositeTypes::cmdUpdateParametersCompType &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.Header) &&
    (strm << _tao_aggregate.PrimaryNTP_ServIP_Addr) &&
    (strm << _tao_aggregate.SecondaryNTP_ServIP_Addr) &&
    (strm << _tao_aggregate.TimeCorrection) &&
    (strm << _tao_aggregate.NTP_Threshold) &&
    (strm << _tao_aggregate.PrivateHostAddr) &&
    (strm << _tao_aggregate.PrivateHostMask) &&
    (strm << _tao_aggregate.PrivateHostPort) &&
    (strm << _tao_aggregate.PublicVoIP_Addr) &&
    (strm << _tao_aggregate.PublicVoIP_Mask) &&
    (strm << _tao_aggregate.PublicVoIP_Port) &&
    (strm << _tao_aggregate.PublicHostAddr) &&
    (strm << _tao_aggregate.PublicHostMask) &&
    (strm << _tao_aggregate.PrivateRR_EthernetAddr) &&
    (strm << _tao_aggregate.PrivateRR_Mask) &&
    (strm << _tao_aggregate.PublicRR_Addr) &&
    (strm << _tao_aggregate.PublicRR_Mask) &&
    (strm << _tao_aggregate.PrivateRP_Addr) &&
    (strm << _tao_aggregate.PrivateRP_Mask) &&
    (strm << _tao_aggregate.PrivateRP_Port) &&
    (strm << _tao_aggregate.PublicRP_Addr) &&
    (strm << _tao_aggregate.PublicRP_Mask) &&
    (strm << _tao_aggregate.MulticastGroupAddr) &&
    (strm << _tao_aggregate.SwitchNTP_Server) &&
    (strm << _tao_aggregate.PrivateRR_FiberAddr);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    LocalInterface::CompositeTypes::cmdUpdateParametersCompType &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.Header) &&
    (strm >> _tao_aggregate.PrimaryNTP_ServIP_Addr) &&
    (strm >> _tao_aggregate.SecondaryNTP_ServIP_Addr) &&
    (strm >> _tao_aggregate.TimeCorrection) &&
    (strm >> _tao_aggregate.NTP_Threshold) &&
    (strm >> _tao_aggregate.PrivateHostAddr) &&
    (strm >> _tao_aggregate.PrivateHostMask) &&
    (strm >> _tao_aggregate.PrivateHostPort) &&
    (strm >> _tao_aggregate.PublicVoIP_Addr) &&
    (strm >> _tao_aggregate.PublicVoIP_Mask) &&
    (strm >> _tao_aggregate.PublicVoIP_Port) &&
    (strm >> _tao_aggregate.PublicHostAddr) &&
    (strm >> _tao_aggregate.PublicHostMask) &&
    (strm >> _tao_aggregate.PrivateRR_EthernetAddr) &&
    (strm >> _tao_aggregate.PrivateRR_Mask) &&
    (strm >> _tao_aggregate.PublicRR_Addr) &&
    (strm >> _tao_aggregate.PublicRR_Mask) &&
    (strm >> _tao_aggregate.PrivateRP_Addr) &&
    (strm >> _tao_aggregate.PrivateRP_Mask) &&
    (strm >> _tao_aggregate.PrivateRP_Port) &&
    (strm >> _tao_aggregate.PublicRP_Addr) &&
    (strm >> _tao_aggregate.PublicRP_Mask) &&
    (strm >> _tao_aggregate.MulticastGroupAddr) &&
    (strm >> _tao_aggregate.SwitchNTP_Server) &&
    (strm >> _tao_aggregate.PrivateRR_FiberAddr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.Val1) &&
    (strm << _tao_aggregate.Val2) &&
    (strm << _tao_aggregate.Eta) &&
    (strm << _tao_aggregate.Figli) &&
    (strm << _tao_aggregate.Famigliari) &&
    (strm << _tao_aggregate.Tel1) &&
    (strm << _tao_aggregate.Tel2);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeNew &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.Val1) &&
    (strm >> _tao_aggregate.Val2) &&
    (strm >> _tao_aggregate.Eta) &&
    (strm >> _tao_aggregate.Figli) &&
    (strm >> _tao_aggregate.Famigliari) &&
    (strm >> _tao_aggregate.Tel1) &&
    (strm >> _tao_aggregate.Tel2);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.Eta) &&
    (strm << _tao_aggregate.Figli) &&
    (strm << _tao_aggregate.Famigliari) &&
    (strm << _tao_aggregate.Tel);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    LocalInterface::CompositeTypes::cmdUpdateParametersCompTypeLogic &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.Eta) &&
    (strm >> _tao_aggregate.Figli) &&
    (strm >> _tao_aggregate.Famigliari) &&
    (strm >> _tao_aggregate.Tel);
}

TAO_END_VERSIONED_NAMESPACE_DECL



